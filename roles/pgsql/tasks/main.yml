---
- name: build a list of encoding to be installed on the server
  set_fact:
    db_locale: "{{ (db_locale|default([])  +  [item.value.locale|default(default_locale)])|unique }}"
  with_dict: "{{ pg_clusters }}"

- name: Ensure the locale required by the clusters exists
  locale_gen:
    name: "{{ item }}"
    state: present
  with_items: "{{ db_locale }}"

- name: Build the list of the PostgreSQL defined ports
  set_fact:
    pg_ports: "{{ pg_ports |default([]) + [item.value.params.port] }}"
  with_dict: "{{ pg_clusters }}"

- name: Check the port is unique within the clusters
  assert:
    that: >
          pg_ports | count
          ==
          pg_ports | unique | count
    msg: "Duplicated port detected in the cluster definition. Please check the variable pg_clusters in group_vars or in hosts_vars for any duplicated port."

- name: setup the clusters
  include: setup_clusters.yml
  when: ('dbserver' in group_names) or ('rstserver' in group_names)


- name: deploy pgbackrest.conf
  template:
    src: pgbackrest.conf.j2
    dest: "{{ pgbackrest_conf }}"
    owner: "{{ pg_osuser }}"
    group: "{{ pg_osgroup }}"
    mode: 0644

- name: setup the backup server
  include: setup_bckserver.yml
  when: inventory_hostname == pg_backrest.backup_server

- name: restore the backup on the secondary
  include: restore_secondary.yml
  with_dict: "{{ pg_clusters }}"
  when: inventory_hostname == pg_backrest.secondary
  loop_control:
    loop_var: db_cluster

- name: Start the postgresql service on the secondary
  service:
    name: postgresql
    state: started
  when: inventory_hostname == pg_backrest.secondary


- name: deploy test_restore
  template:
    src: test_restore.sh.j2
    dest: "{{pg_home_dir}}/test_restore.sh"
    owner: "{{ pg_osuser }}"
    group: "{{ pg_osgroup }}"
    mode: 0700
  when: inventory_hostname == pg_backrest.restore_server
